// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API in go using Gin framework",
    "title": "API Service",
    "contact": {},
    "version": "1.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Check user data at DB and generate token",
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "parameters": [
          {
            "description": "Login User",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Save user data in DB",
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "Mixin0",
        "parameters": [
          {
            "description": "Register User",
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.RegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.RegisterResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          }
        }
      }
    },
    "/auth/validate": {
      "post": {
        "description": "Validate the token and return claims data",
        "tags": [
          "Auth"
        ],
        "summary": "Get private claims data of the token",
        "operationId": "Mixin1",
        "parameters": [
          {
            "type": "string",
            "description": "Authrization",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.ValidateResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.ValidateResponse"
            }
          }
        }
      }
    },
    "/logistic": {
      "get": {
        "description": "Get a logistic based on given parameter",
        "tags": [
          "Logistic"
        ],
        "summary": "Find a logistic data",
        "operationId": "Mixin3",
        "parameters": [
          {
            "type": "string",
            "description": "test example",
            "name": "origin_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "test example",
            "name": "destionation_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Authorzation(Bearer random_value)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.FindOneResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Create a new logistic data and return a message",
        "tags": [
          "Logistic"
        ],
        "summary": "Create a new logistic data",
        "operationId": "Mixin4",
        "parameters": [
          {
            "description": "Create a new logistic data",
            "name": "create",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.CreateLogisticRequest"
            }
          },
          {
            "type": "string",
            "description": "Authorzation(Bearer random_value)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.CreateLogisticResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "pb.ClaimResponse": {
      "type": "object",
      "properties": {
        "standardClaims": {
          "$ref": "#/definitions/pb.StandardClaims"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "pb.CreateLogisticRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        },
        "destinationName": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "logisticName": {
          "type": "string"
        },
        "originName": {
          "type": "string"
        }
      }
    },
    "pb.CreateLogisticResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.FindOneData": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        },
        "destinationName": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "logisticName": {
          "type": "string"
        },
        "originName": {
          "type": "string"
        }
      }
    },
    "pb.FindOneResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/pb.FindOneData"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.LoginRequest": {
      "type": "object",
      "properties": {
        "msisdn": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "pb.LoginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "pb.RegisterRequest": {
      "type": "object",
      "properties": {
        "msisdn": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "pb.RegisterResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.StandardClaims": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "string"
        },
        "expiresAt": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "issuedAt": {
          "type": "integer"
        },
        "issuer": {
          "type": "string"
        },
        "notBefore": {
          "type": "integer"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "pb.ValidateResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/pb.ClaimResponse"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "API in go using Gin framework",
    "title": "API Service",
    "contact": {},
    "version": "1.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Check user data at DB and generate token",
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "parameters": [
          {
            "description": "Login User",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Save user data in DB",
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "Mixin0",
        "parameters": [
          {
            "description": "Register User",
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.RegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.RegisterResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/pb.LoginResponse"
            }
          }
        }
      }
    },
    "/auth/validate": {
      "post": {
        "description": "Validate the token and return claims data",
        "tags": [
          "Auth"
        ],
        "summary": "Get private claims data of the token",
        "operationId": "Mixin1",
        "parameters": [
          {
            "type": "string",
            "description": "Authrization",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.ValidateResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/pb.ValidateResponse"
            }
          }
        }
      }
    },
    "/logistic": {
      "get": {
        "description": "Get a logistic based on given parameter",
        "tags": [
          "Logistic"
        ],
        "summary": "Find a logistic data",
        "operationId": "Mixin3",
        "parameters": [
          {
            "type": "string",
            "description": "test example",
            "name": "origin_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "test example",
            "name": "destionation_name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Authorzation(Bearer random_value)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.FindOneResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Create a new logistic data and return a message",
        "tags": [
          "Logistic"
        ],
        "summary": "Create a new logistic data",
        "operationId": "Mixin4",
        "parameters": [
          {
            "description": "Create a new logistic data",
            "name": "create",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pb.CreateLogisticRequest"
            }
          },
          {
            "type": "string",
            "description": "Authorzation(Bearer random_value)",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/pb.CreateLogisticResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "pb.ClaimResponse": {
      "type": "object",
      "properties": {
        "standardClaims": {
          "$ref": "#/definitions/pb.StandardClaims"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "pb.CreateLogisticRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        },
        "destinationName": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "logisticName": {
          "type": "string"
        },
        "originName": {
          "type": "string"
        }
      }
    },
    "pb.CreateLogisticResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.FindOneData": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        },
        "destinationName": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "logisticName": {
          "type": "string"
        },
        "originName": {
          "type": "string"
        }
      }
    },
    "pb.FindOneResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/pb.FindOneData"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.LoginRequest": {
      "type": "object",
      "properties": {
        "msisdn": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "pb.LoginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "pb.RegisterRequest": {
      "type": "object",
      "properties": {
        "msisdn": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "pb.RegisterResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "pb.StandardClaims": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "string"
        },
        "expiresAt": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "issuedAt": {
          "type": "integer"
        },
        "issuer": {
          "type": "string"
        },
        "notBefore": {
          "type": "integer"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "pb.ValidateResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/pb.ClaimResponse"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    }
  }
}`))
}
