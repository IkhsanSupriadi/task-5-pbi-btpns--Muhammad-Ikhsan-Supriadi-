// Code generated by go-swagger; DO NOT EDIT.

package logistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yusrilsabir22/orderfaz/docs-svc/models"
)

// Mixin4OKCode is the HTTP code returned for type Mixin4OK
const Mixin4OKCode int = 200

/*
Mixin4OK OK

swagger:response mixin4OK
*/
type Mixin4OK struct {

	/*
	  In: Body
	*/
	Payload *models.PbCreateLogisticResponse `json:"body,omitempty"`
}

// NewMixin4OK creates Mixin4OK with default headers values
func NewMixin4OK() *Mixin4OK {

	return &Mixin4OK{}
}

// WithPayload adds the payload to the mixin4 o k response
func (o *Mixin4OK) WithPayload(payload *models.PbCreateLogisticResponse) *Mixin4OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mixin4 o k response
func (o *Mixin4OK) SetPayload(payload *models.PbCreateLogisticResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Mixin4OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Mixin4UnauthorizedCode is the HTTP code returned for type Mixin4Unauthorized
const Mixin4UnauthorizedCode int = 401

/*
Mixin4Unauthorized Unauthorized

swagger:response mixin4Unauthorized
*/
type Mixin4Unauthorized struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewMixin4Unauthorized creates Mixin4Unauthorized with default headers values
func NewMixin4Unauthorized() *Mixin4Unauthorized {

	return &Mixin4Unauthorized{}
}

// WithPayload adds the payload to the mixin4 unauthorized response
func (o *Mixin4Unauthorized) WithPayload(payload string) *Mixin4Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mixin4 unauthorized response
func (o *Mixin4Unauthorized) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Mixin4Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
