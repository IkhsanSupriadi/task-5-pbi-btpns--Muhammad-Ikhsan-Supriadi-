// Code generated by go-swagger; DO NOT EDIT.

package logistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// Mixin4HandlerFunc turns a function with the right signature into a mixin4 handler
type Mixin4HandlerFunc func(Mixin4Params) middleware.Responder

// Handle executing the request and returning a response
func (fn Mixin4HandlerFunc) Handle(params Mixin4Params) middleware.Responder {
	return fn(params)
}

// Mixin4Handler interface for that can handle valid mixin4 params
type Mixin4Handler interface {
	Handle(Mixin4Params) middleware.Responder
}

// NewMixin4 creates a new http.Handler for the mixin4 operation
func NewMixin4(ctx *middleware.Context, handler Mixin4Handler) *Mixin4 {
	return &Mixin4{Context: ctx, Handler: handler}
}

/*
	Mixin4 swagger:route POST /logistic Logistic mixin4

# Create a new logistic data

Create a new logistic data and return a message
*/
type Mixin4 struct {
	Context *middleware.Context
	Handler Mixin4Handler
}

func (o *Mixin4) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMixin4Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
