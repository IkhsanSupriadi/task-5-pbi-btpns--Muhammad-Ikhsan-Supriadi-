// Code generated by go-swagger; DO NOT EDIT.

package logistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// Mixin3HandlerFunc turns a function with the right signature into a mixin3 handler
type Mixin3HandlerFunc func(Mixin3Params) middleware.Responder

// Handle executing the request and returning a response
func (fn Mixin3HandlerFunc) Handle(params Mixin3Params) middleware.Responder {
	return fn(params)
}

// Mixin3Handler interface for that can handle valid mixin3 params
type Mixin3Handler interface {
	Handle(Mixin3Params) middleware.Responder
}

// NewMixin3 creates a new http.Handler for the mixin3 operation
func NewMixin3(ctx *middleware.Context, handler Mixin3Handler) *Mixin3 {
	return &Mixin3{Context: ctx, Handler: handler}
}

/*
	Mixin3 swagger:route GET /logistic Logistic mixin3

# Find a logistic data

Get a logistic based on given parameter
*/
type Mixin3 struct {
	Context *middleware.Context
	Handler Mixin3Handler
}

func (o *Mixin3) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMixin3Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
