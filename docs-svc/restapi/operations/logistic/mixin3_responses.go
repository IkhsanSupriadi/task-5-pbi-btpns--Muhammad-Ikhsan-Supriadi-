// Code generated by go-swagger; DO NOT EDIT.

package logistic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yusrilsabir22/orderfaz/docs-svc/models"
)

// Mixin3OKCode is the HTTP code returned for type Mixin3OK
const Mixin3OKCode int = 200

/*
Mixin3OK OK

swagger:response mixin3OK
*/
type Mixin3OK struct {

	/*
	  In: Body
	*/
	Payload *models.PbFindOneResponse `json:"body,omitempty"`
}

// NewMixin3OK creates Mixin3OK with default headers values
func NewMixin3OK() *Mixin3OK {

	return &Mixin3OK{}
}

// WithPayload adds the payload to the mixin3 o k response
func (o *Mixin3OK) WithPayload(payload *models.PbFindOneResponse) *Mixin3OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mixin3 o k response
func (o *Mixin3OK) SetPayload(payload *models.PbFindOneResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Mixin3OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Mixin3UnauthorizedCode is the HTTP code returned for type Mixin3Unauthorized
const Mixin3UnauthorizedCode int = 401

/*
Mixin3Unauthorized Unauthorized

swagger:response mixin3Unauthorized
*/
type Mixin3Unauthorized struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewMixin3Unauthorized creates Mixin3Unauthorized with default headers values
func NewMixin3Unauthorized() *Mixin3Unauthorized {

	return &Mixin3Unauthorized{}
}

// WithPayload adds the payload to the mixin3 unauthorized response
func (o *Mixin3Unauthorized) WithPayload(payload string) *Mixin3Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the mixin3 unauthorized response
func (o *Mixin3Unauthorized) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *Mixin3Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
